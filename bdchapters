#!/usr/bin/python3
#
# HH:MM:SS.SSS - starts with 00:00:00.0000

import optparse
import string
import math
import os


def generateMkvXml(line, chapterNum):
    matroskaXml = "\t\t<ChapterAtom>\n"
    matroskaXml += "\t\t\t<ChapterTimeStart>" + line.rstrip('\n') + "</ChapterTimeStart>\n"
    matroskaXml += "\t\t\t<ChapterDisplay>\n"
    matroskaXml += "\t\t\t\t<ChapterString>Chapter " + str(chapterNum) + "</ChapterString>\n"
#    matroskaXml += "\t\t\t\t<ChapterLanguage>eng</ChapterLanguage>\n"
    matroskaXml += "\t\t\t</ChapterDisplay>\n"
    matroskaXml += "\t\t</ChapterAtom>\n"
    return matroskaXml   

def returnTime( ptsMark, offset ):
    ptsFreq = 45000
    ptsMark -= offset
    ptsTime = float(ptsMark) / float(ptsFreq)
    ptsHour = math.modf(ptsTime / 3600)
    ptsMinute = math.modf(float(ptsHour[0]) * 60)
    ptsSecond = ptsMinute[0] * 60
	
    if ptsSecond >= 10:
        return '%(hour)02d:%(minute)02d:%(second)02.3F' % {'hour': ptsHour[1], 'minute': ptsMinute[1], 'second': ptsSecond}
    else:
        return '%(hour)02d:%(minute)02d:0%(second)02.3F' % {'hour': ptsHour[1], 'minute': ptsMinute[1], 'second': ptsSecond}


def main():
    p = optparse.OptionParser(description=' Deconstructs the MPLS file and converts the PTS information to create properly formatted XML chapter file for Matroska.  This program needs the MPLS file from the BluRay disc associated with the M2TS file(s) that you are processing.',
                              prog='bdchapters',
                              version='BluRay Chapter Converter 0.5',
                              usage='%prog -i [inputfile] -o [outputdir]')
    p.add_option('--input', '-i', action="store", help='the MPLS file from the BluRay disc', dest="inputfile")
    p.add_option('--output', '-o', action="store", help='the directory for output XML files', dest="outputdir")
    (options, arguments) = p.parse_args()
    
    if options.inputfile == None:
        p.error("no inputfile specified.")   
    elif options.outputdir == None:
        options.outputdir = os.path.dirname(options.inputfile) #replace the file extension
    elif options.outputdir[-1] == '/':
        options.outputdir = options.outputdir[:-1]
    
    print("\n")
    print('Input file:', options.inputfile)
    print('Output directory:', options.outputdir)
    print("\n")

    input = open(options.inputfile, 'rb')	
    
    playlist_address = 0
    playlist_mark_address = 0
    playitems = []

    input.seek(8, 0)
    playlist_address = int.from_bytes(input.read(4), byteorder='big') # Playlist position at $08-$0B
    input.seek(12, 0)
    playlist_mark_address = int.from_bytes(input.read(4), byteorder='big') # Playlist Mark position at $0C-$0F

    input.seek(playlist_address + 6, 0) # don't care about the length of the playlist (4 byte) and reserve (2 byte)
    num_of_playitems = int.from_bytes(input.read(2), byteorder='big')
    input.seek(2, 1) # skip number of subpath (not sure what subpath means)
    for x in range(num_of_playitems):
        playitem_len = int.from_bytes(input.read(2), byteorder='big')
        playitem_name = input.read(5).decode("ascii")
        input.seek(7, 1) # skip "M2TS" and connection_condition
        in_time = int.from_bytes(input.read(4), byteorder='big')
        #out_time = int.from_bytes(input.read(4), byteorder='big')
        playitems.append([playitem_name, in_time, []])
        input.seek(playitem_len - 16, 1) # next play item

    input.seek(playlist_mark_address + 4, 0) # don't care about the length of the playlist marks
    num_of_playlist_marks = int.from_bytes(input.read(2), byteorder='big')
    for x in range(num_of_playlist_marks):
        input.seek(2, 1) # skip mark_type
        playitem_ref = int.from_bytes(input.read(2), byteorder='big')
        time = int.from_bytes(input.read(4), byteorder='big')
        playitems[playitem_ref][2].append(time)
        input.seek(6, 1) # next playlist mark

    input.close()

    matroskaXmlHeader = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<Chapters>\n\t<EditionEntry>\n"
    matroskaXmlFooter = "\t</EditionEntry>\n</Chapters>"
    
    for playitem in playitems:
        if playitem[2]:
            outputfile = options.outputdir + "/" + os.path.basename(options.inputfile)[:-4] + playitem[0] + ".xml"
            print("writing to ", os.path.basename(outputfile))
            output = open(outputfile, 'w')
            output.write(matroskaXmlHeader)
            for count in range(len(playitem[2])):
                timestamp = returnTime(playitem[2][count], playitem[1])
                output.write(generateMkvXml(timestamp, count + 1))
            output.write(matroskaXmlFooter)
            output.close()


if __name__ == '__main__':
    main()
